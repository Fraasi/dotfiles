#!/usr/bin/env python3
"""Fetch new movie release lists"""

from datetime import datetime
import urllib
import argparse
import sys
import re
import requests
from bs4 import BeautifulSoup


parser = argparse.ArgumentParser(description='Fetch new movie release lists (default: moviescountdown)')
group = parser.add_mutually_exclusive_group()
group.add_argument('NUM',
                   help='number of months to fetch from moviescountdown (default: 1) (weeks if negative number)',
                   nargs='?', default=1, type=int, choices=list(range(-4, 7)))
group.add_argument('-r', help='fetch list from rotten tomatoes', action='store_true')
group.add_argument('-s', help='fetch list from soaper', action='store_true')
group.add_argument('-v', help='fetch list from vidscr', action='store_true')
args = parser.parse_args()

# print(args, sys.argv)

CURRENT_YEAR = datetime.now().year
SECONDS_IN_A_DAY = 24 * 60 * 60
WEEK_IN_SECONDS = SECONDS_IN_A_DAY * 7
MONTH_IN_SECONDS = SECONDS_IN_A_DAY * 30
IMDB_LINK = 'https://www.imdb.com/find?q='
ROT_URL = 'https://www.rottentomatoes.com/browse/movies_at_home/sort:newest'
SOAP_URL = f'https://soaper.live/movielist/year/{CURRENT_YEAR}/sort/release'
COUNTDOWN_URL = 'https://moviescountdown.com/recently-released-dvd'
COUNTDOWN_URL_UPCOMING = 'https://moviescountdown.com/upcoming-dvd/all'
VIDSRC_PAGES = 2

def format_time(seconds):
    """format seconds to 'N days ago'"""
    days = abs(seconds) // 86400
    ago_togo = 'ago' if seconds < 0 else 'to go'
    if seconds == 0:
        return "today"
    return f"{days} days {ago_togo}"

def get_soup(url):
    """returns bs4 from url"""
    print(f'fetching list from: {url}\n')
    try:
        html = requests.get(url).text
        # for troubleshooting
        # f = open('featured_test.html', 'w')
        # f.write(html)
        # f.close()
    except requests.exceptions.RequestException as err:
        raise SystemExit(err) from err
    return BeautifulSoup(html, 'html.parser')

# default option
if len(sys.argv) == 1 or args.NUM != 1:
    if args.NUM < 0:
        COUNTDOWN_URL=COUNTDOWN_URL_UPCOMING
        MONTH_IN_SECONDS=WEEK_IN_SECONDS

    soup = get_soup(COUNTDOWN_URL)
    for a in soup.select('countdown-content-trending-items > a'):
        time = a.find('countdown-content-trending-item-countdown').get('data-time')
        time = int(time)
        if abs(time) < (MONTH_IN_SECONDS * abs(int(args.NUM))):
            time = format_time(time)
            title = re.sub(r'\n.*', '', a.get_text().strip())
            print(f'{title:<30} [{time}]  {IMDB_LINK}{urllib.parse.quote_plus(title)}')

elif args.r:
    soup = get_soup(ROT_URL)
    for div in soup.select('[data-qa="discovery-media-list-item-caption"]'):
        a_score = div.find(attrs={'slot': 'audienceScore'}).get_text().strip() \
                if div.find(attrs={'slot': 'audienceScore'}) else 'N/A'
        title = div.find(attrs={'data-qa': 'discovery-media-list-item-title'}).get_text().strip()
        date = div.find(attrs={'data-qa': 'discovery-media-list-item-start-date'}).get_text().strip()
        date = date.replace('Streaming ', '')
        date_obj = datetime.strptime(date, '%b %d, %Y')
        date_str = date_obj.strftime('%d-%m-%Y')
        print((
            f'{a_score:<4}  {title:<20}  [{date_str:<5}]  '
            f'{IMDB_LINK}{urllib.parse.quote_plus(title)}'
            ))

elif args.s:
    soup = get_soup(SOAP_URL)
    movs = []
    for div in soup.select('div.thumbnail.text-center'):
        year = div.find('div', class_='img-tip label label-info').get_text()
        if int(year) != CURRENT_YEAR:
            continue
        title = div.find('h5').find('a').get_text()
        date = div.find('div', class_='img-right-bottom-tip').get_text()
        date_obj = datetime.strptime(f'{date}-{year}', '%m-%d-%Y')
        date_str = date_obj.strftime('%d-%m-%Y')
        movs.append({
            'title': title,
            'date_str': date_str
            })

    sorted_by_date = sorted(movs, key=lambda x: datetime.strptime(x['date_str'], '%d-%m-%Y'), reverse=True)
    for mov in sorted_by_date:
        title, date_str = mov.values()
        print(f'{title:<30}  [{date_str:<10}]  {IMDB_LINK}{urllib.parse.quote_plus(title)}')

elif args.v:

    def green(text: str) -> str:
        return f"\033[92m{text}\033[0m"

    for i in range(1, VIDSRC_PAGES + 1):
        uri = f"https://vidsrc.me/movies/latest/page-{i}.json"
        print(f"\nfetching list from: {uri}\n")
        response = requests.get(uri)
        json_data = response.json()

        for movie in json_data["result"]:
            if str(CURRENT_YEAR) in movie["title"]:
                print(
                        f"{movie['title']}\n ",
                        green(f"{movie['embed_url']} -"),
                        green(f"https://www.imdb.com/title/{movie['imdb_id']}")
                        )

