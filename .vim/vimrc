"t for changes to take effect, run ':so %'

" If you create your own .vimrc, it is recommended to add these lines somewhere near the top. Then Vim works like before you had a .vimrc.
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

" fixes the annoying termresponse on start, https://stackoverflow.com/questions/21618614/vim-shows-garbage-characters?rq=3
:set t_RV=

" set cursor, fixes terminal bug {{{
if &term =~ '^xterm'
  " insert mode
  let &t_SI .= "\<Esc>[0 q"
  " normal, visual mode
  let &t_EI .= "\<Esc>[1 q"
  " 0  -> blinking block.
  " 1  -> blinking block (default).
  " 2  -> steady block.
  " 3  -> blinking underline.
  " 4  -> steady underline.
  " 5  -> blinking bar (xterm).
  " 6  -> steady bar (xterm).
  " reset cursor when vim exits
  autocmd VimLeave * silent !printf '\033[0 q'
endif
" }}}

" remaps {{{
" map leader key to space
let mapleader = "."
" tgpt
nnoremap <leader>c :!vim-tgpt 
" get filename and linenumber to register, use gf to goto
" nnoremap <F2> O<c-r>%:<c-r>=line('.')<CR><Esc>dd
" map jk to esc & put cursor where it was
inoremap jk <Esc>l
" toggle netrw, alt + x
nnoremap x :20 Lexplore<CR>
" clear search highlight
nnoremap c :nohlsearch<CR>
" clear prev search & set search to normal regex (very magic), :help magic
nnoremap / :nohlsearch<return><esc>/\v
nnoremap ? :nohlsearch<return><esc>?\v
" save file with Ã…
inoremap Ã… <ESC>:w<CR>i
nnoremap Ã… :write<CR>
" edit vimrc
nnoremap <leader>e :e $MYVIMRC<CR>
" write & close current buffer, see custom command Wc below
nnoremap <leader>bc :Wc<CR>
" change buffer hotkeys
nnoremap <leader>bn :bnext<CR>
nnoremap <leader>bp :bprevious<CR>
nnoremap <leader>-  :bprevious<CR>
" nnoremap > :bnext<CR>
" location list jumps
nnoremap [l :lnext<CR>
nnoremap ]l :lprevious<CR>
" run current script
nnoremap <leader>r :! clear && "%:p" <return>
" run cursor blinking fix
nnoremap <leader>b :! tput cvvis <return>
" visual-block mode ctrl+v remap fix
nnoremap <leader>v <c-v>
" run prettier on
nnoremap <Leader>p <Plug>(Prettier)
" surround word with quotes
nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel
" surround selection (in one line) with quotes
vnoremap <leader>" :s/\%V\(.*\)\%V/"\1"/<CR>
" open Netrw in the directory of the current file
nnoremap <leader>fd :20 Lexplore %:p:h<CR>
" open current directory in new tab
nnoremap <Leader>fn :tabedit %:h<CR>
" ctrl + space to show completions
inoremap <C-space> <C-x><C-o>
" close buffer wihout saving
nnoremap <C-w>Q :bdelete!<CR>
" open git diffs in new buffer, see custom commands below
nnoremap <leader>gd :call Gitdiff()<CR>
"{{{ move & indent selected line(s) up/down
  " ^] is a single character that represents the ALT key, use C+v, Esc in Vim (C+q, Esc on Windows)
  " https://stackoverflow.com/questions/741814/move-entire-line-up-and-down-in-vim/2439848#2439848
  nnoremap j :move .+1<CR>==
  nnoremap k :move .-2<CR>==
  inoremap j <Esc>:move .+1<CR>==gi
  inoremap k <Esc>:move .-2<CR>==gi
  vnoremap k :move '<-2<CR>gv='>my'<mzgv'yo'z
  vnoremap j :move '>+1<CR>gv='<my'>mzgv'yo'z
" }}}
" }}}

" filetype specific settings {{{
" enable vim-auto-popmenu
let g:apc_enable_ft = {'text':1, 'markdown':1, 'javascript':1, 'html':1, 'css':1}

augroup filetype_settings
  autocmd!
  autocmd FileType javascript,typescript {
    nnoremap <Leader>l "lyiwoconsole.log('<C-R>l:', <C-R>l)<Esc>
    set omnifunc=javascriptcomplete#CompleteJS
    compiler eslint
  }
  autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
  autocmd FileType css set omnifunc=csscomplete#CompleteCSS
  autocmd BufNewFile,BufRead .\=vimrc setlocal foldmethod=marker
  autocmd BufWritePost vimrc source $MYVIMRC
  autocmd Syntax javascript,typescript {
    setlocal foldmethod=indent
  }
  autocmd FileType typescript {
    compiler tsc
    setlocal makeprg=npx\ tsc\ --noEmit\ --pretty\ false
  }
  autocmd Filetype sh {
    compiler shellcheck
    highlight Echo guibg=darkred guifg=white
    syn keyword Echo echo
    match Echo /echo/
  }
  autocmd FileType text {
    setlocal breakindent
  }
  autocmd FileType python compiler pylint

  " }
  " open the quickfix window whenever a quickfix command is executed (like :make) AND there are errors
  autocmd QuickFixCmdPost [^l]* cwindow
augroup END
" }}}

" Vim settings {{{
" set colorcolumn=100                   " Columns to highlight
" set breakindent                         " Leaves some margin to right side
set hidden
set shortmess+=c                        " Don't pass messages to |ins-completion-menu|.
set expandtab                           " Use the appropriate number of spaces to insert a <Tab>.
set tabstop=2 shiftwidth=2 smarttab     " Number of spaces that a <Tab> in the file counts for.
set autoindent                          " Copy indent from current line when starting a new line.
set copyindent                          " Copy indent for new lines when auto-indenting.
set shiftround                          " Round indent to multiple of shiftwidth when using < and >
set list listchars=trail:+,extends:>,precedes:< " Display tabs and trailing spaces visually
set number relativenumber               " Show line numbers on the left
set scrolloff=3                         " Show a few lines of context around the cursor, default 5
set omnifunc=syntaxcomplete#Complete    " omni-completion
set completeopt=menuone,noinsert,popup,noselect  " Insert mode completion:
set showmatch                           " Show matching brackets when text indicator is over them
set cursorline                          " Highlight the current line
" statusline {{{
  set laststatus=2                      " Always show the status line
  set statusline=
  " current window|buffer number/buffer count]
  set statusline+=[%{winnr()},%n:%{%len(getbufinfo({'buflisted':1}))%}]\ 
  set statusline+=%<%f%h%m%r%=%-14.(%l/%L,%c%V%)\ %P
" }}}
if has('mouse')
  set mouse=a                           " Enable mouse usage (all modes)
endif
set cmdheight=2                         " More space for displaying messages
set foldenable foldmethod=indent foldcolumn=1 foldlevelstart=5    " Enable folding
set directory=/tmp//                    " Location of swap files
set backupdir=/tmp//                    " // means that the directory information will be saved in the filename
set undodir=/tmp//
set ignorecase smartcase hlsearch       " Ignore case when searching
set path+=**                            " Searches current directory recursively, Note that completion for :find, :sfind, and :tabfind commands do not currently work with 'path' items that contain a URL or use the double star with depth limiter (/usr/**2) or upward search (;) notations. (:h file-search)
set wildignore+=node_modules/**         " Ignore in path
let g:netrw_banner = 0                  " 0 = no banner, toggle with <shiht-i>
let g:netrw_liststyle = 3               " tree style listing
set shortmess-=S                        " enable a count of [x/y] showing in the bottom right corner every time you do a / or ? search.

" }}}

" Highlight todo and trailing whitespace {{{ 
augroup highlights
  autocmd!
  autocmd BufWinEnter * {
    highlight ExtraWhitespace ctermbg=lightred guibg=lightred
    highlight Todo guifg=black guibg=yellow
    call matchadd("ExtraWhitespace", '\s\+$')
    call matchadd("Todo", '[Tt]odo')
  }
  autocmd InsertLeave * {
    highlight ExtraWhitespace ctermbg=lightred guibg=lightred
  }
"   autocmd BufWinLeave * call clearmatches()V
augroup END
"}}}

" WSL yank support {{{
let s:clip = '/c/Windows/System32/clip.exe'
if executable(s:clip)
  augroup WSLYank
    autocmd!
    autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
  augroup END
endif
" }}}

" custom commands {{{
command Vimrc :e $MYVIMRC
command -nargs=1 Log put ='console.log(\"<args>\", <args>)'
command -nargs=1 -complete=file -bar Vopen :rightbelow :vsplit <args> | :wincmd h
command Wc write | bdelete
command Bufonly write | %bdelete | edit#
command Windows echo map(range(1, winnr('$')), '[v:val, bufname(winbufnr(v:val))]')
function! Gitdiff()
  enew
  " scratch file & filetype for colors
  setlocal buftype=nofile
  setlocal bufhidden=hide
  setlocal noswapfile
  setlocal filetype=diff
  read !git diff --unified=1 #:p
  normal gg
  vsplit #
endfunction
" }}}

" Open help in curwin with :H (:h help-curwin) {{{
" By default, help is displayed in a split window.  If you prefer it opens in the current window, try this custom `:HelpCurwin` command:
	command -bar -nargs=? -complete=help H execute s:HelpCurwin(<q-args>)
	let s:did_open_help = v:false

	function s:HelpCurwin(subject) abort
	  let mods = 'silent noautocmd keepalt'
	  if !s:did_open_help
	    execute mods .. ' help'
	    execute mods .. ' helpclose'
	    let s:did_open_help = v:true
	  endif
	  if !getcompletion(a:subject, 'help')->empty()
	    execute mods .. ' edit ' .. &helpfile
	    set buftype=help
	  endif
	  return 'help ' .. a:subject
	endfunction
" }}}

" load other *rc files {{{
try
  " let vimrc_dir = fnamemodify(expand($MYVIMRC), ':p:h')
  " string doesnt work with source
  source ~/.vim/pluginsrc.vim " all plugin related
  source ~/.vim/testrc.vim    " testing things
catch
  echo 'Error loading pluginsrrc or testrc'
  echo v:exception
endtry
" }}}

" add vim 9.1 native packs {{{
if v:version > 900
  packadd! comment
  packadd! editorconfig
endif
" }}}

