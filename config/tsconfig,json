{
  "include": ["src/**/*", "test/**/*"],
  "exclude": ["node_modules"],
  "compilerOptions": {

    /* Base Options: */
    "esModuleInterop": true, // Enables compatibility with CommonJS modules, allowing default imports from modules with no default export.
    "skipLibCheck": true, // Skips type checking of declaration files
    "target": "ES2024",
    "allowJs": true,
    "resolveJsonModule": true,
    "moduleDetection": "force",  // ??
    "isolatedModules": true,
    // Helps tools that compile .ts to .js by enforcing
    // `type` modifiers for type-only imports etc.
    "verbatimModuleSyntax": true,

    /* Strictness */
    "strict": true,
    "noUncheckedIndexedAccess": true, // it ensures that indexed access types are checked for undefined values,
    "noImplicitOverride": true, // This option requires that any method in a subclass that overrides a method in a superclass must explicitly use the override keyword.

    /* If transpiling with TypeScript: */
    "module": "NodeNext", // Sets the  moduleResolution to use (commonjs, nodenext, esnext)
    "outDir": "dist",
    "sourceMap": true, // .js.map files

    /* AND if you're building for a library: */
    /* "declaration": true, // .d.ts files */

    /* AND if you're building for a library in a monorepo: */
    /* "composite": true, */
    /* "declarationMap": true, // .d.ts.map files */ // “Go to definition” jumps to TS source etc.:

    /* If NOT transpiling with TypeScript: */
    /* "module": "preserve", */
    /* "noEmit": true, */

    /* If your code runs in the DOM: */
    "lib": ["ES2024", "DOM", "DOM.iterable"],

    /* If your code doesn't run in the DOM: */
    /* "lib": ["ES2024"] */

    //===== Output: JavaScript =====
    // Emptily imported modules must exist
    "noUncheckedSideEffectImports": true,

    //===== Type checking =====
    "exactOptionalPropertyTypes": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitReturns": true,
    "noPropertyAccessFromIndexSignature": true, // This setting enforces that properties accessed via dot notation must be explicitly defined in the type.


    // from old config
    "incremental": true, // Enables incremental compilation, build only the changed code
    "noUnusedParameters": false, // Do not allow unused parameters in functions.
    "noUnusedLocals": false, // Similar to noUnusedParameters, but for local variables.
    "forceConsistentCasingInFileNames": true, // Ensures that file names are treated with consistent casing, which is important for cross-platform compatibility.,
    "allowUnreachableCode": false, // When set to false, this option raises errors for code that is unreachable, meaning it cannot be executed.
    "noErrorTruncation": true, // When enabled, this option prevents TypeScript from truncating error messages, providing full details about the error.
    /* "moduleResolution": "node", // ?? */
    "checkJs": true,
  }
}

