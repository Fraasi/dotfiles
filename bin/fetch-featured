#!/usr/bin/env python3

import sys
import re
import requests
import urllib
from bs4 import BeautifulSoup


up_url = 'https://upmovies.net/cinema-movies.html'
rot_url = ' https://www.rottentomatoes.com/browse/movies_at_home/sort:newest'

if len(sys.argv) > 1 and sys.argv[1] == '-r':
    try:
        html = requests.get(rot_url).text
    except requests.exceptions.RequestException as err:
        raise SystemExit(err)
    soup = BeautifulSoup(html, 'html.parser')
    for div in soup.select('[data-qa="discovery-media-list-item-caption"]'):
        # print(div)
        c_score = div.find(attrs={'slot': 'criticScore'}).get_text() if div.find(attrs={'slot': 'criticScore'}) else 'N/A'
        a_score = div.find(attrs={'slot': 'audienceScore'}).get_text() if div.find(attrs={'slot': 'audienceScore'}) else 'N/A'
        # scores = div.find('div', class_='wrap').get_text() if div.find('div', class_='wrap') else 'N/A'
        title = div.find(attrs={'data-qa': 'discovery-media-list-item-title'}).get_text().strip()
        date = div.find(attrs={'data-qa': 'discovery-media-list-item-start-date'}).get_text().strip()
        # print('{0} / {1} | {2} '.format(scores, title, date))
#         output += '{:<4} / {:<4} | {:<20} | {:<5} | {}'.format(c_score, a_score, title, date, f'https://www.imdb.com/find/?q={urllib.parse.quote_plus(title)}\n')
        print('{:<4}   {:<20}   {:<5}   {}'.format(a_score, title, date, f'https://www.imdb.com/find/?q={urllib.parse.quote_plus(title)}'))

else:
    try:
        html = requests.get(up_url).text
    except requests.exceptions.RequestException as err:
        raise SystemExit(err)
    try:
        limit = int(sys.argv[1])
    except:
        limit = 6

    # for troubleshooting
    #f = open('featured_test.html', 'w')
    #f.write(html)
    #f.close()

    soup = BeautifulSoup(html, 'html.parser')

    # skip first one
    for div in soup.select('div.shortItem.listItem')[1:]:
        if limit <= 0:
            break
        quality = div.find('p', class_='film_hd').get_text()
        if quality != 'HD':
            continue

        title = div.find(class_='title').get_text()
        file_info = div.find('div', 'file-info').get_text()
        info_cleaned = []
        for info in file_info.split('\n'):
            if re.search(r'Duration|Actors', info):
                continue
            else:
                info_cleaned += info + '\n'
        # strip first and last two newlines and join
        info_cleaned = ''.join(info_cleaned[1:-2]).replace('\n', ' | ')
        link = f"https://www.imdb.com/find?q={urllib.parse.quote_plus(title)}"
        parsed = '\n({0}) {1} - {2}\n{3}'.format(quality, title, link, info_cleaned)
        print(parsed)
        limit -= 1

