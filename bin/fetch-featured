#!/usr/bin/env python3

from datetime import datetime
import argparse
import sys
import re
import requests
import urllib
from bs4 import BeautifulSoup


parser = argparse.ArgumentParser(description='Fetch new movie release lists')
group = parser.add_mutually_exclusive_group()
group.add_argument('-u', help='fetch list from upmovies (default)', action='store_true')
group.add_argument('-r', help='fetch list from rotten tomatoes', action='store_true')
group.add_argument('-s', help='fetch list from soaper', action='store_true')
args = parser.parse_args()

CURRENT_YEAR = datetime.now().year
IMDB_LINK = 'https://www.imdb.com/find?q='
UP_URL = 'https://upmovies.net/cinema-movies.html'
ROT_URL = 'https://www.rottentomatoes.com/browse/movies_at_home/sort:newest'
SOAP_URL = f'https://soaper.tv/movielist/year/{CURRENT_YEAR}/sort/release'

def get_soup(url):
    try:
        html = requests.get(url).text
        # for troubleshooting
        #f = open('featured_test.html', 'w')
        #f.write(html)
        #f.close()
    except requests.exceptions.RequestException as err:
        raise SystemExit(err)
    print(f'fetching list from: {url}\n')
    return BeautifulSoup(html, 'html.parser')

# default option
if len(sys.argv) == 1 or args.u:
    soup = get_soup(UP_URL)

    # skip first one
    for div in soup.select('div.shortItem.listItem')[1:]:
        quality = div.find('p', class_='film_hd').get_text()
        if quality != 'HD':
            continue

        title = div.find(class_='title').get_text()
        file_info = div.find('div', 'file-info').get_text()
        info_cleaned = []
        for info in file_info.split('\n'):
            if re.search(r'Duration|Actors', info):
                continue
            else:
                info_cleaned += info + '\n'
        # strip first and last two newlines and join
        info_cleaned = ''.join(info_cleaned[1:-2]).replace('\n', ' | ')
        link = f'{IMDB_LINK}{urllib.parse.quote_plus(title)}'
        print('\n{0} ({1}) - {2}\n{3}'.format(title, quality, link, info_cleaned))


elif args.r:
    soup = get_soup(ROT_URL)
    for div in soup.select('[data-qa="discovery-media-list-item-caption"]'):
        a_score = div.find(attrs={'slot': 'audienceScore'}).get_text().strip() if div.find(attrs={'slot': 'audienceScore'}) else 'N/A'
        title = div.find(attrs={'data-qa': 'discovery-media-list-item-title'}).get_text().strip()
        date = div.find(attrs={'data-qa': 'discovery-media-list-item-start-date'}).get_text().strip()
        date = date.replace('Streaming ', '')
        date_obj = datetime.strptime(date, '%b %d, %Y')
        date_str = date_obj.strftime('%d-%m-%Y')
        print('{:<4}  {:<20}  [{:<5}]  {}'.format(a_score, title, date_str, f'{IMDB_LINK}{urllib.parse.quote_plus(title)}'))


elif args.s:
    soup = get_soup(SOAP_URL)
    for div in soup.select('div.thumbnail.text-center'):
        title = div.find('h5').find('a').get_text()
        date = div.find('div', class_='img-right-bottom-tip').get_text()
        year = div.find('div', class_='img-tip label label-info').get_text()
        if int(year) != CURRENT_YEAR:
            continue
        date_obj = datetime.strptime(f'{date}-{year}', '%m-%d-%Y')
        date_str = date_obj.strftime('%d-%m-%Y')
        print('{:<30}  [{:<10}]  {}'.format(title, date_str, f'{IMDB_LINK}{urllib.parse.quote_plus(title)}'))

